{"version":3,"sources":["assets/irenic.svg","components/home/Activity.tsx","components/home/Nav.tsx","components/home/Feed.tsx","components/home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Activity","className","NavLink","to","label","history","useHistory","useState","location","pathname","currentpath","setCurrentpath","useEffect","listen","axios","get","withCredentials","src","Home","Notifications","Profile","Number","alt","Nav","irenic_logo","Feed","basename","path","exact","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,oC,2MCQ5BC,G,MAJ2B,WACxC,OAAO,yBAAKC,UAAU,e,0CCoBlBC,EAAkC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACvCC,EAAUC,cADyC,EAEnBC,mBAAiBF,EAAQG,SAASC,UAFf,mBAElDC,EAFkD,KAErCC,EAFqC,KAIzDC,qBAAU,WACRP,EAAQQ,QAAO,gBAAGJ,EAAH,EAAGA,SAAH,OAAkBE,EAAeF,MAEhDK,IAAMC,IAAI,kCAAmC,CAAEC,iBAAiB,MAE/D,CAACX,IAuBJ,OACE,yBACEJ,UAAWS,IAAgBP,EAAK,6BAA+B,YAE/D,kBAAC,IAAD,CAAMA,GAAIA,GACR,yBACEc,IArBM,CACZC,KAAM,CACJ,kEACA,0DAEFC,cAAe,CACb,+EACA,+EAEFC,QAAS,CACP,0EACA,uEAUehB,GAAsBiB,OAAOX,IAAgBP,IACxDmB,IAAI,KAEN,8BAAOlB,MAMAmB,EAlEO,WACpB,OACE,yBAAKtB,UAAU,OACb,gCACE,yBAAKgB,IAAKO,IAAaF,IAAI,YAE7B,yBAAKrB,UAAU,aACb,kBAAC,EAAD,CAASE,GAAG,QAAQC,MAAM,SAC1B,kBAAC,EAAD,CAASD,GAAG,iBAAiBC,MAAM,kBACnC,kBAAC,EAAD,CAASD,GAAG,WAAWC,MAAM,eCTtBqB,EAJQ,WACrB,OAAO,yBAAKxB,UAAU,UCqCTiB,EAnBmB,WAChC,OACE,kBAAC,IAAD,CAAQQ,SAAS,WACf,yBAAKzB,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0B,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,KAChB,kBAAC,IAAD,CAAUxB,GAAG,YAGjB,kBAAC,EAAD,SCEO0B,MAlBf,WAIE,OAHAjB,qBAAU,eAGH,kBAAC,EAAD,OCVWkB,QACW,cAA7BC,OAAOvB,SAASwB,UAEe,UAA7BD,OAAOvB,SAASwB,UAEhBD,OAAOvB,SAASwB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ba43499f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/irenic.dc4ab841.svg\";","import React from 'react';\n\ninterface ActivityProps {}\n\nconst Activity: React.FC<ActivityProps> = () => {\n  return <div className=\"activity\"></div>;\n};\n\nexport default Activity;\n","import React, { useEffect, useState } from 'react';\n\nimport { Link, useHistory } from 'react-router-dom';\nimport axios from 'axios'\n// assets\nimport irenic_logo from '../../assets/irenic.svg';\nconst Nav: React.FC = () => {\n  return (\n    <div className=\"nav\">\n      <header>\n        <img src={irenic_logo} alt=\"irenic\" />\n      </header>\n      <div className=\"nav-links\">\n        <NavLink to=\"/home\" label=\"Home\" />\n        <NavLink to=\"/notifications\" label=\"Notifications\" />\n        <NavLink to=\"/profile\" label=\"Profile\" />\n      </div>\n    </div>\n  );\n};\n\ninterface NavLinkProps {\n  to: string;\n  label: string;\n}\nconst NavLink: React.FC<NavLinkProps> = ({ to, label }) => {\n  const history = useHistory();\n  const [currentpath, setCurrentpath] = useState<string>(history.location.pathname);\n  \n  useEffect(() => {\n    history.listen(({ pathname }) => setCurrentpath(pathname));\n\n    axios.get('http://localhost:8000/auth/user', { withCredentials: true });\n\n  }, [history]);\n\n  interface Icons {\n    Home?: string[];\n    Notifications?: string[];\n    Profile?: string[];\n  }\n\n  const icons = {\n    Home: [\n      'https://img.icons8.com/material-outlined/24/000000/home--v2.png',\n      'https://img.icons8.com/material/24/000000/home--v5.png',\n    ],\n    Notifications: [\n      'https://img.icons8.com/material-outlined/24/000000/appointment-reminders.png',\n      'https://img.icons8.com/material-rounded/24/000000/appointment-reminders.png',\n    ],\n    Profile: [\n      'https://img.icons8.com/material-outlined/24/000000/user-male-circle.png',\n      'https://img.icons8.com/material/24/000000/user-male-circle--v1.png',\n    ],\n  };\n\n  return (\n    <div\n      className={currentpath === to ? 'nav-link selected-nav-link' : 'nav-link'}\n    >\n      <Link to={to}>\n        <img\n          src={icons[label as keyof Icons][Number(currentpath === to)]}\n          alt=\"\"\n        />\n        <span>{label}</span>\n      </Link>\n    </div>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\n\nconst Feed: React.FC = () => {\n  return <div className=\"feed\"></div>;\n};\n\nexport default Feed;\n","import React from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  useHistory,\n  Link,\n  Redirect,\n} from 'react-router-dom';\n\n//styles\nimport '../scss/Home.css';\n\n// Components\nimport Activity from './Activity';\nimport Nav from './Nav';\nimport Feed from './Feed';\n\ninterface HomeProps {}\n\nconst Home: React.FC<HomeProps> = () => {\n  return (\n    <Router basename=\"/irenic\">\n      <div className=\"home\">\n        <Nav />\n        <Switch>\n          <Route path=\"/home\">\n            <Feed />\n          </Route>\n          <Route exact path=\"/\">\n            <Redirect to=\"/home\" />\n          </Route>\n        </Switch>\n        <Activity />\n      </div>\n    </Router>\n  );\n};\n\nexport default Home;\n","import React, { useEffect } from 'react';\n\nimport './App.css';\n/* import Cookies from 'universal-cookie'; */\n\n// components\nimport Home from './components/home/Home';\n\nimport { login } from './components/api';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n  useHistory,\n} from 'react-router-dom';\n\nfunction App() {\n  useEffect(() => {\n    //login({ username: 'raj', password: 'adminpassword' });\n  });\n  return <Home />;\n}\n\n/* const Test = () => {\n  const history = useHistory();\n  useEffect(() => {\n    const cookies = new Cookies();\n    console.log(cookies.get('token'));\n    history.push('/test');\n  });\n\n  return <div className=\"App\"></div>;\n}; */\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}