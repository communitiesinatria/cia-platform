{"version":3,"sources":["assets/irenic.svg","components/home/ActivityBoxes.tsx","components/home/Activity.tsx","components/api.ts","components/GlobalContext.tsx","components/home/Nav.tsx","components/home/Feed.tsx","components/Notifications/index.tsx","components/home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Topics","className","Activity","type","placeholder","cache","setupCache","maxAge","api","axios","create","adapter","cookie","Cookies","endpoint","window","location","origin","a","get","href","withCredentials","result","data","GlobalContext","createContext","GlobalContextProvider","children","useState","user","setUser","useEffect","checkAuth","then","newuser","Provider","value","LoggedinProfile","src","profile_img","alt","name","bio","username","NavLink","to","label","history","useHistory","pathname","currentpath","setCurrentpath","console","log","listen","Home","Notifications","Profile","Number","Nav","useContext","irenic_logo","Posts","posts","length","CreatePost","textareaRef","useRef","charcount","setCharcount","maxLength","ref","onChange","current","style","height","scrollHeight","trimStart","Feed","Notification","basename","path","exact","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b3dab844.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/irenic.dc4ab841.svg\";","import React from 'react';\n\nimport '../scss/ActivityBoxes.css';\n\ninterface TopicsProps {}\nexport const Topics: React.FC<TopicsProps> = () => {\n  return (\n    <div className=\"activity-box topics\">\n      <header>\n        <h4>Topics</h4>\n      </header>\n\n      <div className=\"activity-content\">\n          <div className=\"topic\">\n              <p>#SomeTopic</p>\n          </div>\n          <div className=\"topic\">\n              <p>#SomeTopic</p>\n          </div>\n          <div className=\"topic\">\n              <p>#SomeTopic</p>\n          </div>\n          <div className=\"topic\">\n              <p>#SomeTopic</p>\n          </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\n// Activity boxes\nimport { Topics } from './ActivityBoxes';\n\ninterface ActivityProps {}\n\nconst Activity: React.FC<ActivityProps> = () => {\n  return (\n    <div className=\"activity\">\n      <div className=\"search\">\n        <input type=\"text\" placeholder=\"search irenic..\"/>\n      </div>\n      <div className=\"activities\">\n        <Topics />\n      </div>\n    </div>\n  );\n};\n\nexport default Activity;\n","import axios from 'axios';\nimport { setupCache } from 'axios-cache-adapter';\nimport Cookies from 'universal-cookie';\n// Create `axios-cache-adapter` instance\nconst cache = setupCache({\n  maxAge: 15 * 60 * 1000,\n});\n\n// Create `axios` instance passing the newly created `cache.adapter`\nconst api = axios.create({\n  adapter: cache.adapter,\n});\n\nconst cookie = new Cookies();\n\nconst endpoint =\n  window.location.origin === 'http://localhost:3000'\n    ? 'http://localhost:8000'\n    : window.location.origin;\n\nexport async function checkAuth() {\n  const token = cookie.get('token');\n  if (!token) {\n    window.location.href = `${endpoint}/account/login`;\n  } else {\n    try {\n      const result = await api.get(`${endpoint}/auth/user`, {\n        withCredentials: true,\n      });\n\n      return result.data;\n    } catch (error) {\n       window.location.href = `${endpoint}/account/login`;\n    }\n  }\n}\n\nexport async function getMembers() {\n  console.log(endpoint);\n  let result;\n  try {\n    result = await api.get(`${endpoint}/api/team`);\n    return result.data;\n  } catch (error) {\n    console.log(error);\n    return [];\n  }\n}\n\ntype RegisterationDetails = {\n  email: string;\n  username: string;\n  password: string;\n  github?: string;\n  instagram?: string;\n};\nexport async function register({\n  email,\n  username,\n  password,\n  github,\n  instagram,\n}: RegisterationDetails) {\n  let result;\n  try {\n    result = await api.post(`${endpoint}/api/register`, {\n      email,\n      username,\n      password,\n      github,\n      instagram,\n    });\n    return result.data;\n  } catch (error) {\n    console.log(error);\n    return [];\n  }\n}\n\ninterface PasswordLogin {\n  password: string;\n}\ninterface UsernameLogin extends PasswordLogin {\n  username: string;\n}\ninterface EmailLogin extends PasswordLogin {\n  email: string;\n}\ntype LoginDetails = UsernameLogin | EmailLogin;\n\nexport async function login(login: LoginDetails) {\n  const { username, email, password }: any = login;\n  let result;\n  try {\n    //result = await api.post(`${endpoint}/auth`, { email, username, password });\n\n    result = await api({\n      maxRedirects: 0,\n      method: 'post',\n      url: `${endpoint}/auth`,\n      data: { email, username, password },\n    });\n\n    //result = await loadDoc(`${endpoint}/auth`, { email, username, password })\n\n    if (result.status === 400) {\n      return [{ message: result.data }];\n    } else if (result.status === 200) {\n      const cookies = new Cookies();\n      cookies.set('token', result.data, { path: '/' });\n      //window.location.href = `${endpoint}/irenic`;\n      return result.data;\n    }\n  } catch (error) {\n    console.log(error);\n    return [{ message: 'invalid username or password' }];\n  }\n}\n\nfunction loadDoc(url: string, { username, email, password }: any) {\n  const id = email || username;\n  const id_name = email ? 'email' : username ? 'username' : '';\n\n  var xhttp = new XMLHttpRequest();\n  return new Promise((res, rej) => {\n    xhttp.onreadystatechange = function () {\n      if (this.readyState === 4 && this.status === 200) {\n        res(this.responseText);\n      } else {\n        rej(this);\n      }\n    };\n    xhttp.open('POST', url, true);\n    xhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n    xhttp.send(`${id_name}=${id}&password=${password}`);\n  });\n}\n\n\n","import React, { createContext, useEffect, useState } from 'react';\n\n// Api\nimport { checkAuth } from './api';\n//types\nimport { User, GlobalContextValue } from './ContextTypes';\n\nexport const GlobalContext = createContext<GlobalContextValue>({});\n\nexport const GlobalContextProvider: React.FC = ({ children }) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    checkAuth().then((newuser) => {\n      setUser(newuser);\n    });\n  }, []);\n\n  return (\n    <GlobalContext.Provider value={{ user }}>{children}</GlobalContext.Provider>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\n\nimport { Link, useHistory } from 'react-router-dom';\n// import axios from 'axios';\n\n// Context\nimport { GlobalContext } from '../GlobalContext';\n// types\nimport { User } from '../ContextTypes';\n// assets\nimport irenic_logo from '../../assets/irenic.svg';\nconst Nav: React.FC = () => {\n  const { user } = useContext(GlobalContext);\n  return (\n    <div className=\"nav\">\n      <header>\n        <img src={irenic_logo} alt=\"irenic\" />\n      </header>\n\n      <div className=\"nav-links\">\n        <NavLink to=\"/home\" label=\"Home\" />\n        <NavLink to=\"/notifications\" label=\"Notifications\" />\n        <NavLink to=\"/profile\" label=\"Profile\" />\n      </div>\n\n      <LoggedinProfile user={user} />\n    </div>\n  );\n};\n\nconst LoggedinProfile: React.FC<{ user: User | undefined }> = ({ user }) => {\n  if (user) {\n    return (\n      <div className=\"profile-preview\">\n        <img src={user.profile_img} alt=\"profilepicture\" />\n        <div className=\"about\">\n          <h4>{user.name}</h4>\n          <p>{user.bio ? user.bio : ''}</p>\n          <p>{user.username}</p>\n        </div>\n      </div>\n    );\n  } else return <></>;\n};\n\ninterface NavLinkProps {\n  to: string;\n  label: string;\n}\nconst NavLink: React.FC<NavLinkProps> = ({ to, label }) => {\n  const history = useHistory();\n\n  const [currentpath, setCurrentpath] = useState<string>(history.location.pathname);\n\n  useEffect(() => {\n    console.log(history);\n    history.listen(({ pathname }) => setCurrentpath(pathname));\n  }, [history]);\n\n  interface Icons {\n    Home?: string[];\n    Notifications?: string[];\n    Profile?: string[];\n  }\n\n  const icons = {\n    Home: [\n      'https://img.icons8.com/material-outlined/24/000000/home--v2.png',\n      'https://img.icons8.com/material/24/000000/home--v5.png',\n    ],\n    Notifications: [\n      'https://img.icons8.com/material-outlined/24/000000/appointment-reminders.png',\n      'https://img.icons8.com/material-rounded/24/000000/appointment-reminders.png',\n    ],\n    Profile: [\n      'https://img.icons8.com/material-outlined/24/000000/user-male-circle.png',\n      'https://img.icons8.com/material/24/000000/user-male-circle--v1.png',\n    ],\n  };\n\n  return (\n    <div\n      className={currentpath === to ? 'nav-link selected-nav-link' : 'nav-link'}\n    >\n      <Link to={to}>\n        <img\n          src={icons[label as keyof Icons][Number(currentpath === to)]}\n          alt=\"\"\n        />\n        <span>{label}</span>\n      </Link>\n    </div>\n  );\n};\n\nexport default Nav;\n","import React, { useContext, useRef, useState } from 'react';\n\nimport { GlobalContext } from '../GlobalContext';\nconst Feed: React.FC = () => {\n  const { user } = useContext(GlobalContext);\n  return (\n    <div className=\"feed\">\n      <header>\n        <h3>Home</h3>\n      </header>\n      <CreatePost profile_img={user?.profile_img} />\n      <Posts />\n    </div>\n  );\n};\n\ninterface PostsProps {}\nconst Posts: React.FC<PostsProps> = () => {\n  const [posts, setPosts] = useState([]);\n\n  return (\n    <div className=\"posts\">\n      {!posts.length ? (\n        <div className=\"no-posts\">\n          <img\n            src=\"https://img.icons8.com/material-sharp/24/000000/activity-feed-2.png\"\n            alt=\"\"\n          />\n          <span>No Posts yet</span>\n        </div>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n};\n\ninterface CreatePostProps {\n  profile_img: string | undefined;\n}\nconst CreatePost: React.FC<CreatePostProps> = ({ profile_img }) => {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const [charcount, setCharcount] = useState(0);\n  const onchange = () => {\n    if (textareaRef.current) {\n      // adjust height of textarea\n      textareaRef.current.style.height = '0px';\n      textareaRef.current.style.height =\n        25 + textareaRef.current.scrollHeight + 'px';\n\n      textareaRef.current.value = textareaRef.current.value.trimStart();\n      if (textareaRef.current.value.length <= 255) {\n        setCharcount(textareaRef.current.value.length);\n      } else {\n      }\n    }\n  };\n\n  return (\n    <div className=\"create-post\">\n      <form>\n        <img src={profile_img} alt=\"profile_img\" />\n        <div className=\"compose\">\n          <textarea\n            maxLength={255}\n            ref={textareaRef}\n            onChange={onchange}\n            placeholder=\"what's going on?\"\n          />\n        </div>\n      </form>\n      <p>{charcount >= 10 ? charcount : <></>}</p>\n\n      <button className={!(charcount > 10) ? 'disabled-post' : ''}>Post</button>\n    </div>\n  );\n};\n\nexport default Feed;\n","import React from 'react';\n\ninterface NotificationsProps {}\nconst Notifications: React.FC<NotificationsProps> = () => {\n  return (\n    <div className=\"notifications\">\n      <header>\n        <h3>Notifications</h3>\n      </header>\n\n      <div className=\"notification-list\">\n        <Notification />\n      </div>\n    </div>\n  );\n};\n\ninterface NotificationProps {}\nconst Notification: React.FC<NotificationProps> = () => {\n  return (\n    <div className=\"notification\">\n      <h4>Title</h4>\n      <p>\n        Lorem ipsum dolor sit, amet consectetur adipisicing elit. Placeat\n        reprehenderit consequatur inventore aut voluptatum a.\n      </p>\n    </div>\n  );\n};\n\nexport default Notifications;\n","import React from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  useHistory,\n  Link,\n  Redirect,\n} from 'react-router-dom';\n\n//styles\nimport '../scss/Home.css';\n\n// Components\nimport Activity from './Activity';\nimport Nav from './Nav';\nimport Feed from './Feed';\nimport Notifications from '../Notifications';\n\ninterface HomeProps {}\n\nconst Home: React.FC<HomeProps> = () => {\n  return (\n    <Router basename=\"/irenic\">\n      <div className=\"home\">\n        <Nav />\n        <Switch>\n          <Route path=\"/home\">\n            <Feed />\n            <Activity />\n          </Route>\n          <Route path=\"/notifications\">\n            <Notifications />\n          </Route>\n\n          <Route exact path=\"/\">\n            <Redirect to=\"/home\" />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default Home;\n","import React, { useEffect } from 'react';\n\nimport './App.css';\n/* import Cookies from 'universal-cookie'; */\n\n// components\nimport Home from './components/home/Home';\n\nimport { login } from './components/api';\n\n// GlobalContext\nimport {GlobalContextProvider} from './components/GlobalContext'\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n  useHistory,\n} from 'react-router-dom';\n\nfunction App() {\n  useEffect(() => {\n    \n  });\n  return (\n    <GlobalContextProvider>\n      <Home />\n    </GlobalContextProvider>\n  );\n}\n\n/* const Test = () => {\n  const history = useHistory();\n  useEffect(() => {\n    const cookies = new Cookies();\n    console.log(cookies.get('token'));\n    history.push('/test');\n  });\n\n  return <div className=\"App\"></div>;\n}; */\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}